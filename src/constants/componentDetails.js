export const BUTTON = {
  title: 'Компонент Button',
  description:
    'Button є багаторазовим елементом користувацького інтерфейсу, який можна використовувати в різних частинах вашого веб-додатку. Він підтримує кілька станів, таких як активний (active), вимкнений (disabled), і може функціонувати як звичайна кнопка або як посилання, залежно від переданих атрибутів.',
  usage: [
    {
      title: 'Керування діями',
      content:
        'Використовуйте кнопку для виконання різних дій на сторінці, таких як надсилання форми, відкриття модального вікна, виконання запиту до сервера тощо.',
    },
    {
      title: 'Навігація',
      content:
        'Завдяки підтримці атрибуту href, кнопка може слугувати як посилання для навігації між сторінками вашого додатку.',
    },
    {
      title: 'Стан',
      content:
        'Використовуйте прапорці active та disabled для відображення стану кнопки, що допомагає користувачам зрозуміти, чи кнопка наразі доступна для натискання чи ні.',
    },
  ],
};

export const BUTTON_GROUP = {
  title: 'Компонент ButtonGroup',
  description:
    'Компонент ButtonGroup є контейнером для групи кнопок, який дозволяє організовувати їх в горизонтальну або вертикальну групу. Це корисний інструмент для створення структурованих та логічно згрупованих наборів кнопок у вашому веб-додатку.',
  usage: [
    {
      title: 'Групування дій',
      content:
        "Використовуйте ButtonGroup для об'єднання пов'язаних кнопок, таких як кнопки інструментів або опцій, щоб користувачі могли легко знайти і взаємодіяти з відповідними діями.",
    },
    {
      title: 'Організація інтерфейсу',
      content:
        'ButtonGroup допомагає організувати інтерфейс, забезпечуючи рівномірне вирівнювання та відступи між кнопками, що покращує загальну зручність користування.',
    },
    {
      title: 'Вибір стану',
      content:
        'Завдяки підтримці вертикального (vertical) розташування, ButtonGroup можна використовувати для створення перемикачів, списків опцій або інших елементів керування, які потребують вертикального розташування кнопок.',
    },
  ],
};

export const ICON = {
  title: 'Компонент Icon',
  description:
    'Icon є багаторазовим елементом користувацького інтерфейсу, який можна використовувати для відображення іконок у вашому веб-додатку. Він підтримує кілька станів, таких як вимкнений (disabled), і може функціонувати як кнопка, якщо передати відповідний обробник подій.',
  usage: [
    {
      title: 'Відображення іконок',
      content:
        'Використовуйте Icon для відображення різноманітних іконок, щоб покращити візуальний вигляд вашого веб-додатку.',
    },
    {
      title: 'Керування діями',
      content:
        'Завдяки підтримці обробника подій onClick, Icon можна використовувати як кнопку для виконання різних дій на сторінці.',
    },
    {
      title: 'Стан',
      content:
        'Використовуйте прапорець disabled для відображення стану іконки, що допомагає користувачам зрозуміти, чи іконка наразі доступна для взаємодії чи ні.',
    },
  ],
};

export const IMAGE = {
  title: 'Компонент Image',
  description:
    'Компонент Image використовується для відображення зображень з підтримкою різних стилів та атрибутів, таких як розмір, альтернативний текст, і можливість зробити зображення круглим.',
  usage: [
    {
      title: 'Відображення зображення',
      content:
        'Використовуйте компонент Image для відображення зображень з вказаним шляхом до файлу зображення, альтернативним текстом, шириною та висотою.',
    },
    {
      title: 'Круглі зображення',
      content:
        'Застосуйте властивість circle для того, щоб зображення відображалось як кругле.',
    },
    {
      title: 'Плейсхолдери',
      content:
        'Якщо шлях до зображення не вказаний, компонент автоматично використовує плейсхолдер з вказаними шириною та висотою.',
    },
    {
      title: 'Класи та стилі',
      content:
        'Ви можете передати додаткові класи та стилі через атрибут className для налаштування вигляду зображення.',
    },
  ],
};

export const CHIP = {
  title: 'Компонент Chip',
  description:
    'Chip є багаторазовим елементом користувацького інтерфейсу, який використовується для відображення невеликих блоків інформації з текстом, іконкою, зображенням або кнопкою закриття. Він підтримує кілька станів та може містити різні атрибути для розширення функціональності.',
  usage: [
    {
      title: 'Відображення тексту',
      content:
        'Використовуйте Chip для відображення тексту, який може бути коротким або довгим. Довгий текст автоматично обрізається.',
    },
    {
      title: 'Chip з іконкою',
      content:
        'Додавайте іконки до Chip, щоб зробити його більш інформативним.',
    },
    {
      title: 'Chip з кнопкою закриття',
      content:
        'Додавайте кнопку закриття до Chip, щоб користувачі могли видаляти ці елементи.',
    },
    {
      title: 'Chip з зображенням',
      content:
        'Використовуйте зображення в Chip для більш візуального представлення інформації.',
    },
    {
      title: 'Обробка подій',
      content:
        'Додавайте обробники подій до Chip, такі як onChipClick та onCloseClick, для додаткової функціональності.',
    },
  ],
};

export const BADGE = {
  title: 'Компонент Badge',
  description:
    'Badge є багаторазовим елементом користувацького інтерфейсу, який використовується для відображення міток чи кількісних індикаторів. Він підтримує кілька стилів та атрибутів, таких як кругла форма (circle), відображення у лінії (inline), зовнішнє відображення (outer), та різні статуси (warning, alert, success, info).',
  usage: [
    {
      title: 'Відображення тексту',
      content:
        'Використовуйте Badge для відображення тексту або числових значень, що допомагає користувачам отримувати коротку і точну інформацію.',
    },
    {
      title: 'Кругла форма',
      content:
        'Застосуйте властивість circle для того, щоб відобразити Badge у вигляді круга, що може бути корисно для іконок або кількісних індикаторів.',
    },
    {
      title: 'Вбудоване відображення',
      content:
        'Використовуйте властивість inline для того, щоб Badge відображався в лінії з іншими елементами.',
    },
    {
      title: 'Зовнішнє відображення',
      content:
        'Застосуйте властивість outer для того, щоб Badge відображався поза межами інших елементів, що робить його більш помітним.',
    },
    {
      title: 'Статуси',
      content:
        'Використовуйте різні статуси, такі як warning, alert, success, info і т.п., щоб візуально відрізняти Badge залежно від контексту інформації.',
    },
  ],
};

export const LIST_GROUP = {
  title: 'Компонент ListGroup',
  description:
    'ListGroup є багаторазовим елементом користувацького інтерфейсу, який використовується для відображення списків елементів з можливістю додавання класів для активних або вимкнених елементів. Він підтримує кілька станів і може приймати як контейнер для списку теги ul, ol або menu.',
  usage: [
    {
      title: 'Відображення списків',
      content:
        'Використовуйте ListGroup для відображення списків елементів, що можуть бути як текстовими, так і містити інші компоненти. Це допомагає структуровано представити інформацію у вигляді списків.',
    },
    {
      title: 'Керування станами елементів',
      content:
        'Додавайте класи active або disabled до елементів списку для відображення їхнього стану. Це допомагає користувачам зрозуміти, які елементи наразі активні або вимкнені.',
    },
    {
      title: 'Користувацькі теги та рендеринг',
      content:
        'Компонент ListGroup дозволяє використовувати теги ul, ol або menu як контейнер для списку за допомогою властивості tag. Ви також можете передати функцію renderItem для кастомного рендерингу кожного елемента списку.',
    },
    {
      title: 'Передача дочірніх елементів',
      content:
        'Якщо не передано масив items, можна передавати дочірні елементи безпосередньо до ListGroup, що дозволяє більшу гнучкість у використанні компоненту.',
    },
  ],
};

export const SELECT = {
  title: 'Компонент Select',
  description:
    'Select є багаторазовим елементом користувацького інтерфейсу, який дозволяє користувачам обирати один варіант із кількох наданих. Компонент підтримує як прості списки варіантів, так і групи варіантів, що дозволяє організовувати вибір у більш складні структури.',
  usage: [
    {
      title: 'Фільтрація та сортування',
      content:
        'Використовуйте Select для фільтрації або сортування даних у вашому додатку. Користувачі можуть обирати один варіант, щоб відфільтрувати або відсортувати дані відповідно до своїх потреб.',
    },
    {
      title: 'Групування варіантів',
      content:
        'Завдяки підтримці опцій у форматі груп, Select дозволяє організувати варіанти в логічні групи, що полегшує користувачам навігацію серед великої кількості варіантів.',
    },
    {
      title: 'Стан',
      content:
        'Використовуйте властивості value та onChange для керування станом обраного варіанту. Це допомагає забезпечити інтерактивну взаємодію з користувачем та підтримувати актуальний стан вибору в додатку.',
    },
    {
      title: 'Кастомізація стилю',
      content:
        'Завдяки властивості className, ви можете налаштувати зовнішній вигляд компонента відповідно до стилю вашого додатка.',
    },
  ],
};

export const INPUT = {
  title: 'Компонент Input',
  description:
    "Input є багаторазовим елементом користувацького інтерфейсу, який дозволяє користувачам вводити текстові дані або інші типи даних, залежно від налаштованого типу інпуту. Компонент підтримує різні стани, такі як обов'язкове поле та помилка, і дозволяє додавати додаткові атрибути для розширення функціональності.",
  usage: [
    {
      title: 'Введення даних',
      content:
        'Використовуйте Input для введення текстових даних, чисел, дат або інших типів даних. Задавайте тип для інпуту через атрибут `type`, щоб визначити, який тип даних може бути введений.',
    },
    {
      title: 'Валідація та повідомлення про помилки',
      content:
        "Додавайте валідацію до Input і відображайте повідомлення про помилки за допомогою властивості `error`, щоб користувачі могли отримати миттєвий зворотний зв'язок під час введення даних.",
    },
    {
      title: "Обов'язкові поля",
      content:
        "Використовуйте атрибут `required` для позначення полів, які необхідно заповнити. Компонент автоматично відобразить повідомлення, що поле є обов'язковим.",
    },
    {
      title: 'Кастомізація та додаткові атрибути',
      content:
        'Завдяки властивості `className`, ви можете налаштувати зовнішній вигляд компонента відповідно до стилю вашого додатка. Крім того, ви можете передавати інші атрибути, такі як `placeholder`, `disabled`, і будь-які інші атрибути HTML.',
    },
  ],
};

export const TAB_BAR = {
  title: 'Компонент TabBar',
  description:
    'TabBar є багаторазовим елементом користувацького інтерфейсу, який дозволяє користувачам перемикатися між різними вкладками. Компонент забезпечує структуру для організації контенту на вкладках і може бути орієнтований як горизонтально, так і вертикально.',
  usage: [
    {
      title: 'Навігація між вкладками',
      content:
        'Використовуйте TabBar для створення інтерфейсу з вкладками, де користувачі можуть перемикатися між різними секціями або категоріями контенту. Це зручно для організації великої кількості інформації в компактній формі.',
    },
    {
      title: 'Вертикальна та горизонтальна орієнтація',
      content:
        'Компонент TabBar підтримує як горизонтальну, так і вертикальну орієнтацію. Властивість `vertical` дозволяє змінювати орієнтацію компонента, що робить його універсальним для різних типів інтерфейсів.',
    },
    {
      title: 'Активна вкладка',
      content:
        'TabBar автоматично встановлює першу вкладку активною, але користувачі можуть змінювати активну вкладку, що дозволяє гнучко керувати відображенням контенту.',
    },
    {
      title: 'Кастомізація стилю',
      content:
        'Завдяки властивості `className`, ви можете налаштувати зовнішній вигляд компонента відповідно до стилю вашого додатка. Це дозволяє інтегрувати TabBar в будь-який інтерфейс.',
    },
  ],
};

export const COMPONENT_DETAILS = {
  button: BUTTON,
  buttonGroup: BUTTON_GROUP,
  icon: ICON,
  image: IMAGE,
  chip: CHIP,
  badge: BADGE,
  listGroup: LIST_GROUP,
  select: SELECT,
  input: INPUT,
  tabBar: TAB_BAR,
};
